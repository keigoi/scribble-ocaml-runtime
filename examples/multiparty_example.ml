open Multiparty
[%%s_syntax_rebind (module Multiparty.Syntax) ]   

(***************
 ** This part will be generated by scribble-ocaml **
 ***************)

type booking
type booking_C = booking_C_1
and booking_C_1 =
  [`send of
    [`Query of [`A] * string *
      [`recv of [`Quote of [`A] * int *
        booking_C_1]]
    |`Yes of [`A] * unit *
      [`send of
        [`Payment of [`S] * string *
          [`recv of [`Ack of [`S] * unit *
            booking_C_2]]]]
    |`No of [`A] * unit *
      booking_C_2]]
and booking_C_2 =
  [`send of
    [`Bye of [`A] * unit *
      [`close]]]
         
let msg_Query : 'dir 'v 'p. ([>`Query of 'dir * 'v * 'p], 'dir, 'v, 'p) lab =
  {_pack=(fun (dir,v) -> `Query(Obj.magic dir,v,Obj.magic ()))}
let msg_Yes : 'dir 'v 'p. ([>`Yes of 'dir * 'v * 'p], 'dir, 'v, 'p) lab =
  {_pack=(fun (dir,v) -> `Yes(Obj.magic dir,v,Obj.magic ()))}
let msg_Payment : 'dir 'v 'p. ([>`Payment of 'dir * 'v * 'p], 'dir, 'v, 'p) lab =
  {_pack=(fun (dir,v) -> `Payment(Obj.magic dir,v,Obj.magic ()))}

let role_agent : [`A] role = __mkrole "agent"
let role_client : [`C] role = __mkrole "client"
let role_server : [`S] role = __mkrole "server"

let connect_C : 'pre 'post. booking channel -> bindto:(empty, booking_C sess, 'pre, 'post) slot -> ('pre,'post,unit) monad =
  fun ch ->
  __connect ~myname:"booking_C" ch

let connect_A ch = __connect ~myname:"booking_A" ch

let accept_S ch = __accept ~myname:"booking_S" ~cli_count:2 ch

let _in : 'p -> 'p sess = Obj.magic
                        
(***************
 ***************)

let ch = new_channel ()

type 'a ctx = <s : 'a>
[@@deriving lens ]

open Syntax.SessionN

let booking_client () =
  let%slot #s = connect_C ch in
  
  send s role_agent msg_Query "hello" >>

  (* let%msg `Quote(v) = recv s agent *)
  (* in *)
  __receive s role_agent >>= fun (`Quote(_,v,p)) ->
  __set s (_in p) >>

  send s role_agent msg_Yes () >>
  send s role_server msg_Payment "123-4567, Nishi-ku, Nagoya, Japan" >>
  return ()
    

module OAuth;
type <ocaml> "Pervasives.string" from "stdlib" as Id;
type <ocaml> "Pervasives.string" from "stdlib" as Pass;
type <ocaml> "Pervasives.string" from "stdlib" as State;
type <ocaml> "Pervasives.string" from "stdlib" as AccessToken;
type <ocaml> "Pervasives.string" from "stdlib" as Code;
type <ocaml> "page" from "__functor_parameter__" as Page;

explicit global protocol OAuth2Web(role U /* User */, role C /* Consumer */, role P /* Provider */)
{
        // Starts OAuth.

        oauth() connect U to C;
	// Consumer redirects User to Provider (HTTP response code 302)
	// remember Consumer's State for later use at (1)
        302_oauth_start(/*state:*/State) from C to U; /* @"open=C" */
        disconnect U and C;

        // After redirection, User gets a login form.
        authorize_request(State) connect U to P;
        200(Page) from P to U;
        disconnect U and P;

        // and POSTs username and password.
        submit(Id,Pass) connect U to P;

        choice at P {
                // login successes.

                // Auth server sends back a 'code'
                // which is later exchanged for AccessToken at (2)
                302_success(/*code:*/Code) from P to U; /* @"open=P" */
                disconnect U and P;

                // User sends the code to Client at redir URL
                callback_success(Code) connect U to C; /* @"port=state" */ // -- (1)

                // then Client gets AcceessToken from Provider
                access_token() connect C to P; /* @"port=code" */ // -- (2)
                200(AccessToken) from P to C;
                disconnect C and P;

                200(Page) from C to U;
                disconnect C and U;
        } or {
                // login fails.

                302_fail() from P to U;
                disconnect U and P;

                callback_fail() connect U to C;
                200(Page) from C to U;
        }
}
